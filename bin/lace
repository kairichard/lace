#!/usr/bin/env ruby

#Copyright 2009-2014 Max Howell and other contributors.
#
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions
#are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
#THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

std_trap = trap("INT") { exit! 130 } # no backtrace thanks
require 'pathname'

LIB_PATH = Pathname.new(__FILE__).realpath.dirname.parent.join("lib").to_s
$:.unshift(LIB_PATH)

require 'lace'

require "extend/ARGV"
require "extend/pathname"

ARGV.extend(LaceArgvExtension)

def require? path
  require path.to_s.chomp
rescue LoadError => e
  # HACK :( because we should raise on syntax errors but
  # not if the file doesn't exist. TODO make robust!
  raise unless e.to_s.include? path
end

case ARGV.first when '-h', '--help', '--usage', '-?', 'help', nil
  require 'cmd/help'
  puts Lace.help_s
  exit ARGV.first ? 0 : 1
when '--version', '-v'
  puts Lace::VERSION
  exit 0
end


begin
  trap("INT", std_trap) # restore default CTRL-C handler
  if Process.uid.zero?
    raise "Refusing to run as sudo"
  end

  aliases = {'ls' => 'list',
             'info' => 'inspect',
             '--upgrade' => 'upgrade',
             'rm' => 'remove'}

  cmd = ARGV.shift
  cmd = aliases[cmd] if aliases[cmd]

  if require? "cmd/" + cmd
    Lace.send cmd.to_s.gsub('-', '_').downcase
  else
    onoe "Unknown command: #{cmd}"
    exit 1
  end

rescue ResourceNotSpecified
  abort "This command requires a resource argument"
rescue UsageError
  onoe "Invalid usage"
  abort ARGV.usage
rescue SystemExit
  puts "Kernel.exit" if ARGV.verbose?
  raise
rescue Interrupt => e
  puts # seemingly a newline is typical
  exit 130
rescue RuntimeError, SystemCallError => e
  raise if e.message.empty?
  onoe e
  exit 1
rescue Exception => e
  onoe e
  puts "#{Tty.white}Please report this bug:"
  puts e.backtrace
  exit 1
else
  exit 1 if Lace.failed?
end
